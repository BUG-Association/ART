#ifndef SAMPLES
#define SAMPLES 36
#endif

#ifndef RECURSION
#define RECURSION 6
#endif

/**
 * GROUND FUNCTION
 */

/* GRID FUNCTIONS */

id createSymetricLinesExpression(
        ART_GV  * art_gv,
        id        inputValue,
        double    frequency,
        double    thickness
        )
{
    // R -> [0, 1]
    id periodicExpr =
            DD_XMOD_D( 
                    DD_MUL_D( inputValue, CONST_D( frequency ) ),
                    CONST_D( 1.0 )
                    );
            
    // Lines
    id gridExpr =
        DD_SUB_D(
            CONST_D( 1.0 ),
            DDD_PULSE_D(
                CONST_D( thickness / 2.0 ),
                CONST_D( 1.0 - thickness / 2.0 ),
                periodicExpr
                )
            );

    return gridExpr;
}


id createXYGridSurface(
        ART_GV  * art_gv,
        id        coordinates,
        id        mainSurface,
        id        gridSurface,
        double    thickness,    // Portion of the periodic interval
        double    frequency
        )
{
    id xLinesExpr =
        createSymetricLinesExpression(
            art_gv,
            P2_X( coordinates ),
            frequency,
            thickness
            );
    id yLinesExpr =
        createSymetricLinesExpression(
            art_gv,
            P2_Y( coordinates ),
            frequency,
            thickness
            );
    
    id xyGridExpr =
        DD_MAX_D(
            xLinesExpr,
            yLinesExpr
            );
    
    return
        MAPPED_SURFACE( 
            xyGridExpr,
            SURFACE_MAP(
                0.0, mainSurface,
                0.95, gridSurface,
                MAP_END
                )
            );
}


ArObj createQuad(ART_GV * art_gv)
{
  Pnt3D * points = ALLOC_ARRAY(Pnt3D, 5);
  
  points[0] = PNT3D(-.5, -.5, 0.);
  points[1] = PNT3D( .5, -.5, 0.);
  points[2] = PNT3D( .5,  .5, 0.);
  points[3] = PNT3D(-.5,  .5, 0.);
  points[4] = PNT3D_HUGE;

  ArObj plane = QUADRANGLE(0, 1, 2, 3);

  ArObj vertices =
    arnvertexset(art_gv,
         points,
         NULL,
         NULL,
         NULL,
         NULL
         );

  return [plane apply: vertices];
}


ArObj createLight(ART_GV * art_gv)
{
  ArObj plane = createQuad(art_gv);

  ArObj spectrum450 =
    CONST_COLOUR_PSSPECTRUM(1.0,
                            PNT2D( 380.0 NANOMETER, 0.0 ),
                            PNT2D( 400.0 NANOMETER, 0.0 ),
                            PNT2D( 430.0 NANOMETER, 0.1 ),
                            PNT2D( 460.0 NANOMETER, 1.0 ),
                            PNT2D( 480.0 NANOMETER, 0.1 ),
                            PNT2D( 530.0 NANOMETER, 0.0 ),
                            PNT2D( 800.0 NANOMETER, 0.0 ),
                            PSS_END
                            );
  
  return [plane apply: LAMBERT_EMITTER(spectrum450, 1.0)];
}

ArObj createGround(ART_GV * art_gv)
{
  ArObj plane = createQuad(art_gv);

  double sz = 700.0;
  
  // Surface material
  ArObj ground_fluo = BFC_COLOUR_MEASUREMENT("Fluorophores/PHP8RVWH.BFC");
  ArObj grey  = LAMBERT_MATERIAL( CONST_COLOUR_GREY(0.0) );
  ArObj white = LAMBERT_MATERIAL(ground_fluo);
  
  double threshold = 0.1;

  ArObj surface =
        createXYGridSurface(
            art_gv,
            TEXTURE_COORDS,
            grey,
            white,
            threshold,
            sz
            );

  return
    [plane apply
    : USCALE(sz)
    : surface
     ];
}


/**
 * Ball
 */

ArNode * createGroovedSphere(
        ART_GV  * art_gv,
        double    angle,
        double    secondaryRadius
        )
{
    double  deltaAngle = atan( secondaryRadius );
    double  angleA = angle - deltaAngle;
    double  angleB = angle + deltaAngle;
    
    id mainTorus = 
        [ TORUS( ( 1.0 / cos(angle) ) * secondaryRadius ) apply
            : USCALE( cos(angle) )
            : TRANSLATION( 0.0, 0.0, sin(angle) ) 
            ];

    double  torusFactorA = 
        ( 1.0 / ( ( 1.0 - secondaryRadius ) * cos(angleA) ) ) * secondaryRadius;
        
    id subTorusA = 
        [ TORUS( torusFactorA ) apply
            : USCALE( ( 1.0 - secondaryRadius ) * cos(angleA) )
            : TRANSLATION( 0.0, 0.0, ( 1.0 - secondaryRadius ) * sin(angleA) ) 
            ];


    double  torusFactorB = 
        ( 1.0 / ( ( 1.0 - secondaryRadius ) * cos(angleB) ) ) * secondaryRadius;

    id subTorusB = 
        [ TORUS( torusFactorB ) apply
            : USCALE( ( 1.0 - secondaryRadius ) * cos(angleB) )
            : TRANSLATION( 0.0, 0.0, ( 1.0 - secondaryRadius ) * sin(angleB) ) 
            ];

    id grooveObj =  [ mainTorus sub : [ subTorusA or : subTorusB ] ];
    id groovePair = [ grooveObj or : [ grooveObj apply : ROT_X( 180 DEGREES )]];
        
    id  allGrooves =
        UNION(
            groovePair,
            [ groovePair apply: ROT_X( 90 DEGREES ) ],
            [ groovePair apply: ROT_Y( 90 DEGREES ) ],
            UNION_END
            );

    return [ SPHERE sub: allGrooves ];
}

ArObj createColumn(ART_GV* art_gv)
{
  double column_height = 3.;
  double inset_margin = 0.5;
  double inset_size = 0.075;
  double inset_height = column_height - 2 * inset_margin;

  double platform_width = 1.3;
  
  id column_main   = [ CYLINDER apply: SCALE(1, 1, column_height)];
  
  id column_rm     = [ CYLINDER apply: SCALE(inset_size, inset_size, inset_height)];
  id bottom_sphere = [ SPHERE   apply: USCALE(inset_size) ];
  id top_sphere    = [ bottom_sphere apply: TRANSLATION_Z(inset_height)];

  id platform = UNION(CYLINDER, TORUS(1), UNION_END);
  id platform_cut = [ CYLINDER apply: TRANSLATION_Z(.5) : SCALE(2., 2., 1.) ];
  
  platform = [ platform sub: platform_cut ];
  platform = [ platform apply: SCALE(0.6, 0.6, 0.2) ];

  id cone_add = [ CONE apply: TRANSLATION_Z(-1) : USCALE(1.1) ];

  cone_add = [ cone_add apply: TRANSLATION_Z(column_height) ];
  
  id platform_top = [ platform apply: TRANSLATION_Z(column_height) ];
  
  column_rm = UNION(column_rm, bottom_sphere, top_sphere, UNION_END);  
  column_rm = [column_rm apply:TRANSLATION(1., 0., inset_margin)];

  int n_steps = 24;
  double rot = 360 DEGREES / n_steps;
  
  for (int i = 0; i < n_steps; i++) {
    column_rm = [column_rm apply: ROT_Z(rot)];
    column_main = [column_main sub: column_rm];
  }

  id torus_rm = [ TORUS(0.45) apply: SCALE(1.7, 1.7, 0.3)];
  torus_rm = [torus_rm apply: TRANSLATION_Z(2.7)];
  column_main = [column_main sub: torus_rm];

  return UNION(
           platform,
           platform_top,
           cone_add,
           column_main,
           UNION_END);
}

ArObj createStage(ART_GV* art_gv,
          ArObj fluo0,
          ArObj fluo1,
          ArObj fluo2)
{
  double ball_sz = 0.4;
  
  id ball = createGroovedSphere(art_gv, 22 DEGREES, 0.1);

  ball = [ball apply
         : TRANSLATION_Z(1.25)
         : USCALE(ball_sz)
         : TRANSLATION_Z(3.)];

  ArObj statue = PLY_MESH("Models/Serapis.ply");
  
  statue = [statue apply: USCALE(0.025)  : TRANSLATION(0, 0.2, 3.1)];
  statue = [statue apply: LAMBERT_MATERIAL(fluo1)];

  ArObj teapot = PLY_MESH("Models/Teapot.ply");

  teapot = [teapot apply: USCALE(0.22) :ROT_Z(20 DEGREES) :TRANSLATION(0.5, -0.5, 3.1)];
  teapot = [teapot apply: LAMBERT_MATERIAL(fluo2)];
  
  id ball_bl =
    [ball apply
    : TRANSLATION(-0.63, -0.63, 0)
    : LAMBERT_MATERIAL(fluo0)
     ];
  
  return
    UNION(statue,
      ball_bl,
      teapot,
      createColumn(art_gv),
      UNION_END);
}

ARM_MAIN_FUNCTION(Teaser)
{
  ArObj diag_0 = CONST_COLOUR_RSSPECTRUM(380 NANOMETERS, 10 NANOMETERS, 1., 0.133453, 0.0892315, 0.0582752, 0.0402483, 0.0294051, 0.026158, 0.0270736, 0.0268621, 0.0372696, 0.061989, 0.133888, 0.273394, 0.458662, 0.618566, 0.680491, 0.705117, 0.713143, 0.718986, 0.725466, 0.722631, 0.721719, 0.728651, 0.723341, 0.728246, 0.733122, 0.738135, 0.73641, 0.737601, 0.736304, 0.735201, 0.734756, 0.736842, 0.735035, 0.749748, 0.728387, 0.752529, 0.743665, 0.750925, 0.775458, 0.707983, 0.792706, RSS_END);
  ArObj diag_1 = CONST_COLOUR_RSSPECTRUM(380 NANOMETERS, 10 NANOMETERS, 1., 0.19997, 0.202777, 0.202959, 0.214107, 0.240493, 0.280692, 0.365751, 0.405121, 0.343804, 0.259756, 0.171909, 0.117016, 0.0771246, 0.0520454, 0.0406752, 0.038523, 0.0309925, 0.03028, 0.0277775, 0.0381847, 0.0633159, 0.14353, 0.373678, 0.676622, 0.843223, 0.899955, 0.91401, 0.926015, 0.933023, 0.937775, 0.939496, 0.942446, 0.944366, 0.949715, 0.94672, 0.954621, 0.956639, 0.958356, 0.961852, 0.95554, 0.962375, RSS_END);
  ArObj diag_2 = CONST_COLOUR_RSSPECTRUM(380 NANOMETERS, 10 NANOMETERS, 1., 0.115502, 0.0975843, 0.0740355, 0.0607324, 0.051874, 0.0427223, 0.0438552, 0.0436491, 0.0420298, 0.043932, 0.0490028, 0.059577, 0.0580652, 0.0552533, 0.0463584, 0.0417573, 0.0405892, 0.0439956, 0.0501479, 0.0660175, 0.105552, 0.198148, 0.335554, 0.470128, 0.543347, 0.573141, 0.582037, 0.589609, 0.587533, 0.579798, 0.583695, 0.594372, 0.595064, 0.607851, 0.593262, 0.613876, 0.60708, 0.612758, 0.638554, 0.585321, 0.65353, RSS_END);
  
  ArObj org_0 = BFC_COLOUR_MEASUREMENT("Fluorophores/TEXTYELL.BFC");
  ArObj org_1 = BFC_COLOUR_MEASUREMENT("Fluorophores/HERPIPIN.BFC");
  ArObj org_2 = BFC_COLOUR_MEASUREMENT("Fluorophores/POLYORAN.BFC");

  ArObj fit_0 = GMM_FIT("Fluorophores/TEXTYELL.gmm");
  ArObj fit_1 = GMM_FIT("Fluorophores/HERPIPIN.gmm");
  ArObj fit_2 = GMM_FIT("Fluorophores/POLYORAN.gmm");

  ArObj c0 = createStage(art_gv, diag_0, diag_1, diag_2);
  ArObj c1 = createStage(art_gv, org_0, org_1, org_2);
  ArObj c2 = createStage(art_gv, fit_0, fit_1, fit_2);

  double r_c = 10 DEGREES;
  double t_c = 3.1;
  
  c0 = [c0 apply: TRANSLATION_X(-t_c)];
  c2 = [c2 apply: TRANSLATION_X(t_c)];

  ArObj light = createLight(art_gv);
  light = [light apply
	      : ROT_X(-90 DEGREES)
	      : SCALE(10, 10, 1.)
	      : TRANSLATION(0., -20., 30.)
	      : ROT_Z(-20 DEGREES)
	   ];

  
  id scene_geometry =
    UNION(c0, c1, c2,
	  createGround(art_gv),
	  light,
	  UNION_END
	  );

  double aspect = 3.0;
  int width = 1200;

  id camera =
    [ CAMERA imageSize: IVEC2D(width, (int)((double)(width) / aspect))
		   ray: RAY3D(PNT3D(0,-27,13),VEC3D(0,1,-.35))
		  zoom: 3.0
      ];
  
  id actionsequence =
    ACTION_SEQUENCE(
		    CREATE_STANDARD_RAYCASTING_ACCELERATION_STRUCTURE,
		    
		    [ LIGHTSOURCE_COLLECTOR
		      sampler2D: STANDARD_SAMPLER_2D
		      resolution: 5 
			   type: arlightsourcetype_area
		      ],
		    

            [ STOCHASTIC_PIXEL_SAMPLER
                sampleProvider:
                    [ PATHTRACER
                        rayCaster:        STANDARD_RAYCASTER
			            maximalRecursion: RECURSION
                        mode:            arpathtracermode_mis
                    ]
                sampleSplattingKernel: TENT_KERNEL
                samplesPerPixel:       SAMPLES
                randomValueGeneration: PSEUDORANDOM_SEQUENCE
            ],

            [ IMAGECONVERSION_RAW_TO_ARTCSP
                removeSource: NO
            ],

            STANDARD_GLOBAL_TONEMAPPING_OPERATOR,
                        
            STANDARD_LUMINANCE_CLIPPING,

            [ IMAGECONVERSION_ARTCSP_TO_TIFF
                removeSource:    YES
                bitsPerChannel:  8
                ],
            
            ACTION_SEQUENCE_END
            );

    id skylight =
      [ HOSEK_SKYLIGHT
            elevation   : 40 DEGREES
	    azimuth     : -125.0 DEGREES
            turbidity   : 2.0
            groundAlbedo: CONST_COLOUR_GREY(0.1)
            ];

    return
        [ SCENE
            sceneGeometry : scene_geometry
            camera        : camera
            actionSequence: actionsequence
            ];

}
