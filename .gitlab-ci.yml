stages:
    - build
    - test
    
before_script:
    - apt-get update
    - apt-get -y install
        cmake
        gobjc
        gobjc++
        libtiff-dev
        liblcms2-dev
        libgnustep-base-dev
        libgsl-dev
        libopenexr-dev
        ninja-build

build_linux:
    stage: build
    script:
        - apt-get update
        - apt-get -y install
            cmake
            gobjc
            gobjc++
            libtiff-dev
            liblcms2-dev
            libgnustep-base-dev
            libgsl-dev
            libopenexr-dev
        - mkdir build
        - cd build
        - cmake .. -GNinja -DCMAKE_INSTALL_PREFIX=../binaries
        - ninja install
    artifacts:
        paths:
            - binaries
    tags:
        - linux

render_linux:
    stage: test
    needs: ["build_linux"]
    script:
        - export PATH=${PATH}:${PWD}/binaries/bin
        - export ART_LIBRARY_PATH=${PWD}/binaries/lib
        - export ART_RESOURCE_PATH=${ART_LIBRARY_PATH}/ART_Resources
        - export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${ART_LIBRARY_PATH}
        - git clone https://gitlab.com/art-development-team/art-functionality-test.git
        - cd art-functionality-test
        - git checkout v2.1
        - python art_functionality_test.py
        - mv reference ..
        - mv output ..
        - cd ..
        - cd reference
        - rm *.artcsp *.artraw *.tiff
        - cd ..
        - if [ $(cat output/report/success) = 'FALSE' ]; then exit 1; fi
    artifacts:
        when: always
        paths:
            - output
            - reference
        reports:
            junit: output/report/junit.xml
    tags:
        - linux
